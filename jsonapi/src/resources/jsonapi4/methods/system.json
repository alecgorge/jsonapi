{
    "name": "System Usage method",
    "depends": [
        "JSONAPI"
    ],
    "methods": [
        {
            "desc": "Gets the amount of memory available to Java.Bukkit.Minecraft. Note that is not a measurement of all the memory in the machine. To find system wide information look at getSystemMemoryTotal",
            "returns": [
                "int",
                "Java memory size in megabytes"
            ],
            "call": "this.getJavaMaxMemory()",
            "name": "server.performance.memory.total"
        },
        {
            "desc": "Gets the amount of memory used by Java.Bukkit.Minecraft. Note that is not a measurement of all the memory used in the machine. To find system wide information look at getSystemMemoryUsage",
            "returns": [
                "int",
                "Java memory usage in megabytes"
            ],
            "call": "this.getJavaMemoryUsage()",
            "name": "server.performance.memory.used"
        },
        {
            "desc": "Gets the total size of the disk that Minecraft is located on",
            "returns": [
                "int",
                "Disk size in megabytes"
            ],
            "call": "this.getDiskSize()",
            "name": "server.performance.disk.size"
        },
        {
            "desc": "Returns the number of bytes that have been used on the disk that Minecraft is located on",
            "returns": [
                "int",
                "Disk usage in megabytes"
            ],
            "call": "this.getDiskUsage()",
            "name": "server.performance.disk.used"
        },
        {
            "desc": "Returns the number of free byte on the disk that Minecraft is located on",
            "returns": [
                "int",
                "Disk free space in megabytes"
            ],
            "call": "this.getDiskFreeSpace()",
            "name": "server.performance.disk.free"
        },
        {
            "desc": "Returns expectedTicks, elapsedTicks, C, expectedClockRate, expectedTime, elapsedTime and % error",
            "returns": [
                "Object",
                "key value pairs with all the values in the descriptions"
            ],
            "call": "this.testClock()",
            "name": "server.performance.tick_health"
        }
    ]
}